{
  "scm-ci-plugin": {
    "modal": {
      "details": "Details",
      "title": "Analysis: {{count}} error found",
      "title_plural": "Analysis: {{count}} errors found"
    },
    "statusbar": {
      "title": "Analyzes",
      "analysis": "{{count}} analysis",
      "analysis_plural": "{{count}} analyzes",
      "error": "{{count}} error",
      "error_plural": "{{count}} errors"
    },
    "popover": {
      "noStatus" : "No status available"
    }
  },
  "permissions": {
    "repository": {
      "readCIStatus": {
        "*": {
          "displayName": "Read CI status",
          "description": "May see CI status results for all repositories"
        }
      },
      "readCIStatus,writeCIStatus": {
        "*": {
          "displayName": "Modify and set CI status",
          "description": "May modify and set CI status results for all repositories"
        }
      }
    }
  },
  "verbs": {
    "repository": {
      "readCIStatus": {
        "displayName": "read CI status",
        "description": "May read status tags from CI servers"
      },
      "writeCIStatus": {
        "displayName": "set CI status",
        "description": "May set status tags for CI servers"
      }
    }
  },
  "workflow": {
    "rule": {
      "CIStatusAllSuccessRule": {
        "name": "All CI status successful",
        "sortKey": "Continuous-Integration",
        "description": "Every CI status is successful.",
        "success": "Every CI status is successful.",
        "failed": "At least one CI status is not successful.",
        "obstacle": "At least one CI status is not successful."
      },
      "CIStatusXSuccessRule": {
        "name": "Number of CI status successful",
        "sortKey": "Continuous-Integration",
        "description": "At least {{ numberOfSuccessful }} CI status are successful.",
        "success": "A sufficient number of CI status are successful.",
        "failed": "Only {{ current }} of {{ expected }} required successful CI status present.",
        "obstacle": "Not enough successful CI status available.",
        "form": {
          "numberOfSuccessful": {
            "label": "Quantity",
            "helpText": "Minimum number of successful CI status.",
            "errorMessage": "The value must be bigger than 0."
          }
        }
      },
      "CIStatusNamedSuccessRule": {
        "name": "Named CI status successful",
        "sortKey": "Continuous-Integration",
        "description": "The CI status with name '{{ name }}' of type '{{ type }}' is successful.",
        "success": "The CI status {{ type }}:{{ name }} is successful.",
        "failed": {
          "CiStatusNotSuccessful": "The CI status {{ type }}:{{ name }} is not successful.",
          "CiStatusMissing": "The CI status {{ type }}:{{ name }} is missing."
        },
        "obstacle": "The named CI status is not successful or not available.",
        "form": {
          "type": {
            "label": "Type",
            "helpText": "The type of the CI status (e.g. 'jenkins')",
            "errorMessage": "This field must not be blank."
          },
          "name": {
            "label": "Name",
            "helpText": "The name of the CI status (e.g. 'test' or 'build')",
            "errorMessage": "This field must not be blank."
          }
        }
      },
      "CIStatusOfTypeSuccessRule": {
        "name": "All CI status of type successful",
        "sortKey": "Continuous-Integration",
        "description": "Every CI status of type '{{ type }}' is successful.",
        "success": "Every CI status of type '{{ type }}' is successful.",
        "failed": {
          "CiStatusNotSuccessful": "Not all CI status of type '{{ type }}' are successful.",
          "CiStatusMissing": "No CI status messages of type '{{ type }}' is present."
        },
        "obstacle": "CI status of the given type are missing or not all successful.",
        "form": {
          "type": {
            "label": "Type",
            "helpText": "The type of the CI status (e.g. 'jenkins')",
            "errorMessage": "This field must not be blank."
          }
        }
      }
    }
  }
}
